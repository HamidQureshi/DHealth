{"version":3,"sources":["webpack:///./src/app/layout/components/sidebar/sidebar.component.html","webpack:///./src/app/layout/components/sidebar/sidebar.component.scss","webpack:///./src/app/layout/components/sidebar/sidebar.component.ts","webpack:///./src/app/layout/components/topnav/topnav.component.html","webpack:///./src/app/layout/components/topnav/topnav.component.scss","webpack:///./src/app/layout/components/topnav/topnav.component.ts","webpack:///./src/app/layout/layout-routing.module.ts","webpack:///./src/app/layout/layout.component.html","webpack:///./src/app/layout/layout.component.scss","webpack:///./src/app/layout/layout.component.ts","webpack:///./src/app/layout/layout.module.ts","webpack:///./src/app/layout/nav/nav.component.html","webpack:///./src/app/layout/nav/nav.component.scss","webpack:///./src/app/layout/nav/nav.component.ts"],"names":[],"mappings":"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","file":"layout-layout-module.js","sourcesContent":["module.exports = \"<div id=\\\"sidebar\\\">\\r\\n    <mat-nav-list>\\r\\n        <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/dashboard']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">dashboard</mat-icon> {{ 'Dashboard' | translate }}\\r\\n        </a> -->\\r\\n        <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/charts']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">bar_chart</mat-icon> {{ 'Charts' | translate }}\\r\\n        </a> -->\\r\\n        \\r\\n        <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/forms']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">input</mat-icon> {{ 'Forms' | translate }}\\r\\n        </a> -->\\r\\n        <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/grid']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">grid_on</mat-icon> {{ 'Material Grid' | translate }}\\r\\n        </a> -->\\r\\n        <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/components']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">code</mat-icon> {{ 'Material Component' | translate }}\\r\\n        </a> -->\\r\\n        <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/profile-page']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">insert_drive_file</mat-icon> {{ 'Profile ' | translate }}\\r\\n        </a>\\r\\n        <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/doctorpatient-page']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">insert_drive_file</mat-icon> {{ 'Doctor/Patient List' | translate }}\\r\\n        </a>\\r\\n        <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/report-list']\\\">\\r\\n            <mat-icon class=\\\"sidenav-icon\\\">table_chart</mat-icon> {{ 'Report List' | translate }}\\r\\n        </a>\\r\\n        \\r\\n        \\r\\n    </mat-nav-list>\\r\\n</div>\\r\\n\"","module.exports = \"#sidebar {\\n  width: 250px;\\n  position: fixed;\\n  top: 56px;\\n  bottom: 0;\\n  background: #fff;\\n  box-shadow: 3px 0 6px rgba(0, 0, 0, 0.24);\\n  z-index: 999;\\n  -ms-overflow-y: auto;\\n  overflow-y: auto; }\\n  #sidebar .mat-nav-list {\\n    width: 100%; }\\n  #sidebar .mat-nav-list a {\\n      display: block; }\\n  #sidebar .mat-nav-list a .mat-icon {\\n        margin-right: 15px; }\\n  .nested-menu .nested {\\n  list-style-type: none; }\\n  .nested-menu .submenu {\\n  display: none;\\n  height: 0; }\\n  .nested-menu .expand.submenu {\\n  display: block;\\n  list-style-type: none;\\n  height: auto;\\n  margin: 0; }\\n  .nested-menu .expand.submenu li a {\\n    padding: 10px;\\n    display: block; }\\n  @media screen and (max-width: 992px) {\\n  #sidebar {\\n    left: -250px; } }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2NvbXBvbmVudHMvc2lkZWJhci9DOlxcVXNlcnNcXEhhbWlkXFxEZXNrdG9wXFxBTFNES1xcZXhhbXBsZXNcXHNiLWFkbWluLW1hdGVyaWFsL3NyY1xcYXBwXFxsYXlvdXRcXGNvbXBvbmVudHNcXHNpZGViYXJcXHNpZGViYXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxZQUFZO0VBQ1osZUFBZTtFQUNmLFNBQVM7RUFDVCxTQUFTO0VBQ1QsZ0JBQWdCO0VBQ2hCLHlDQUF5QztFQUN6QyxZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGdCQUFnQixFQUFBO0VBVHBCO0lBV1EsV0FBVyxFQUFBO0VBWG5CO01BZ0JZLGNBQWMsRUFBQTtFQWhCMUI7UUFjZ0Isa0JBQWtCLEVBQUE7RUFNbEM7RUFFUSxxQkFBcUIsRUFBQTtFQUY3QjtFQUtRLGFBQWE7RUFDYixTQUFTLEVBQUE7RUFOakI7RUFVWSxjQUFjO0VBQ2QscUJBQXFCO0VBQ3JCLFlBQVk7RUFDWixTQUFTLEVBQUE7RUFickI7SUFnQm9CLGFBQWE7SUFDYixjQUFjLEVBQUE7RUFNbEM7RUFDSTtJQUNJLFlBQVksRUFBQSxFQUNmIiwiZmlsZSI6InNyYy9hcHAvbGF5b3V0L2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI3NpZGViYXIge1xyXG4gICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgdG9wOiA1NnB4O1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcclxuICAgIGJveC1zaGFkb3c6IDNweCAwIDZweCByZ2JhKDAsIDAsIDAsIDAuMjQpO1xyXG4gICAgei1pbmRleDogOTk5O1xyXG4gICAgLW1zLW92ZXJmbG93LXk6IGF1dG87XHJcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gICAgLm1hdC1uYXYtbGlzdCB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIC5tYXQtaWNvbiB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi5uZXN0ZWQtbWVudSB7XHJcbiAgICAubmVzdGVkIHtcclxuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgICB9XHJcbiAgICAuc3VibWVudSB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICBoZWlnaHQ6IDA7XHJcbiAgICB9XHJcbiAgICAmIC5leHBhbmQge1xyXG4gICAgICAgICYuc3VibWVudSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgICAgICAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgICAgICBsaSB7XHJcbiAgICAgICAgICAgICAgICBhIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk5MnB4KSB7XHJcbiAgICAjc2lkZWJhciB7XHJcbiAgICAgICAgbGVmdDogLTI1MHB4O1xyXG4gICAgfVxyXG59XHJcbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-sidebar',\r\n    templateUrl: './sidebar.component.html',\r\n    styleUrls: ['./sidebar.component.scss']\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n    public showMenu: string;\r\n    constructor() {}\r\n\r\n    ngOnInit() {\r\n        this.showMenu = '';\r\n    }\r\n\r\n    addExpandClass(element: any) {\r\n        if (element === this.showMenu) {\r\n            this.showMenu = '0';\r\n        } else {\r\n            this.showMenu = element;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"fix-nav\\\">\\r\\n    <button type=\\\"button\\\" mat-icon-button class=\\\"visible-md\\\" (click)=\\\"toggleSidebar()\\\">\\r\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n    </button>\\r\\n    <div class=\\\"nav-brand\\\">\\r\\n        DHealth\\r\\n    </div>\\r\\n\\r\\n    <span class=\\\"nav-spacer\\\"></span>\\r\\n\\r\\n    <!-- <button class=\\\"hidden-sm\\\" mat-icon-button [matMenuTriggerFor]=\\\"profile\\\">\\r\\n        <mat-icon>account_circle</mat-icon>\\r\\n    </button> -->\\r\\n   \\r\\n\\r\\n    <button mat-icon-button (click)=\\\"onLoggedout()\\\">LOGOUT\\r\\n        <mat-icon>exit_to_app</mat-icon>\\r\\n    </button>\\r\\n</mat-toolbar>\\r\\n\"","module.exports = \":host {\\n  display: block;\\n  position: fixed;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  z-index: 1000; }\\n\\n.nav-brand {\\n  width: 215px;\\n  text-align: center; }\\n\\n.topnav-icon {\\n  text-decoration: none;\\n  display: flex;\\n  color: #fff; }\\n\\n.nav-spacer {\\n  flex: 1 1 auto; }\\n\\n.visible-md {\\n  display: none; }\\n\\n.visible-sm {\\n  display: none; }\\n\\n@media screen and (max-width: 992px) {\\n  .visible-md {\\n    display: block; } }\\n\\n@media screen and (max-width: 768px) {\\n  .visible-sm {\\n    display: block; }\\n  .nav-brand {\\n    width: 100%; } }\\n\\n@media screen and (max-width: 768px) {\\n  .hidden-sm {\\n    display: none; } }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2NvbXBvbmVudHMvdG9wbmF2L0M6XFxVc2Vyc1xcSGFtaWRcXERlc2t0b3BcXEFMU0RLXFxleGFtcGxlc1xcc2ItYWRtaW4tbWF0ZXJpYWwvc3JjXFxhcHBcXGxheW91dFxcY29tcG9uZW50c1xcdG9wbmF2XFx0b3BuYXYuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFjO0VBQ2QsZUFBZTtFQUNmLE9BQU87RUFDUCxRQUFRO0VBQ1IsTUFBTTtFQUNOLGFBQWEsRUFBQTs7QUFFakI7RUFDSSxZQUFZO0VBQ1osa0JBQWtCLEVBQUE7O0FBRXRCO0VBQ0kscUJBQXFCO0VBQ3JCLGFBQWE7RUFDYixXQUFXLEVBQUE7O0FBR2Y7RUFDSSxjQUFjLEVBQUE7O0FBR2xCO0VBQ0ksYUFBYSxFQUFBOztBQUVqQjtFQUNJLGFBQWEsRUFBQTs7QUFFakI7RUFDSTtJQUNJLGNBQWMsRUFBQSxFQUNqQjs7QUFFTDtFQUNJO0lBQ0ksY0FBYyxFQUFBO0VBRWxCO0lBQ0ksV0FBVyxFQUFBLEVBQ2Q7O0FBRUw7RUFDSTtJQUNJLGFBQWEsRUFBQSxFQUNoQiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC9jb21wb25lbnRzL3RvcG5hdi90b3BuYXYuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIHRvcDogMDtcclxuICAgIHotaW5kZXg6IDEwMDA7XHJcbn1cclxuLm5hdi1icmFuZCB7XHJcbiAgICB3aWR0aDogMjE1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLnRvcG5hdi1pY29uIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLm5hdi1zcGFjZXIge1xyXG4gICAgZmxleDogMSAxIGF1dG87XHJcbn1cclxuXHJcbi52aXNpYmxlLW1kIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLnZpc2libGUtc20ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5OTJweCkge1xyXG4gICAgLnZpc2libGUtbWQge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgfVxyXG59XHJcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAudmlzaWJsZS1zbSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB9XHJcbiAgICAubmF2LWJyYW5kIHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxufVxyXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgLmhpZGRlbi1zbSB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'app-topnav',\r\n    templateUrl: './topnav.component.html',\r\n    styleUrls: ['./topnav.component.scss']\r\n})\r\nexport class TopnavComponent implements OnInit {\r\n    public pushRightClass: string;\r\n\r\n    constructor(public router: Router, private translate: TranslateService) {\r\n        this.router.events.subscribe(val => {\r\n            if (val instanceof NavigationEnd && window.innerWidth <= 992 && this.isToggled()) {\r\n                this.toggleSidebar();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.pushRightClass = 'push-right';\r\n    }\r\n\r\n    isToggled(): boolean {\r\n        const dom: Element = document.querySelector('body');\r\n        return dom.classList.contains(this.pushRightClass);\r\n    }\r\n\r\n    toggleSidebar() {\r\n        const dom: any = document.querySelector('body');\r\n        dom.classList.toggle(this.pushRightClass);\r\n    }\r\n\r\n    onLoggedout() {\r\n        localStorage.removeItem('isLoggedin');\r\n        this.router.navigate(['/login']);\r\n    }\r\n\r\n    changeLang(language: string) {\r\n        this.translate.use(language);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: LayoutComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                redirectTo: 'dashboard'\r\n            },\r\n            {\r\n                path: 'dashboard',\r\n                loadChildren: './profile-page/profile-page.module#ProfilePageModule'\r\n            },\r\n            {\r\n                path: 'components',\r\n                loadChildren:\r\n                    './material-components/material-components.module#MaterialComponentsModule'\r\n            },\r\n            {\r\n                path: 'profile-page',\r\n                loadChildren: './profile-page/profile-page.module#ProfilePageModule'\r\n            },\r\n            {\r\n                path: 'doctorpatient-page',\r\n                loadChildren: './doctorpatient-page/doctorpatient-page.module#DoctorpatientPageModule'\r\n            },\r\n            {\r\n                path: 'report-list',\r\n                loadChildren: './report-list/reports.module#ReportsModule'\r\n            }\r\n            ,\r\n            {\r\n                path: 'report',\r\n                loadChildren: './report-page/report.module#ReportModule'\r\n            }\r\n            ,\r\n            {\r\n                path: 'add-report',\r\n                loadChildren: './add-report-page/add-report.module#AddReportModule'\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LayoutRoutingModule {}\r\n","module.exports = \"<!-- <app-nav></app-nav> -->\\r\\n<app-topnav></app-topnav>\\r\\n<app-sidebar></app-sidebar>\\r\\n<div class=\\\"main-container\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC9sYXlvdXQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { IKey } from 'selenium-webdriver';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { User } from './model/user';\r\nimport { Report } from './model/report';\r\n\r\nimport { PersistenceService, StorageType } from 'angular-persistence';\r\nimport { LedgerHelper } from '../helper/ledgerhelper';\r\n\r\n\r\n@Component({\r\n    selector: 'app-layout',\r\n    templateUrl: './layout.component.html',\r\n    styleUrls: ['./layout.component.scss']\r\n})\r\nexport class LayoutComponent implements OnInit {\r\n    constructor(private ledgerHelper: LedgerHelper, private http: HttpClient, private persistenceService: PersistenceService) {\r\n// , public snackBar: MatSnackBar, private sanitizer: DomSanitizer\r\n    }\r\n    key: IKey;\r\n    getDoctorURL = 'http://testnet-uk.activeledger.io:5555/transaction/users/doctors';\r\n    getPatientURL = 'http://testnet-uk.activeledger.io:5555/transaction/patients';\r\n    getReportURL = 'http://testnet-uk.activeledger.io:5555/transaction/reports';\r\n\r\n    users: Array<User> = [];\r\n    reports: Array<Report> = [];\r\n\r\n\r\n    ngOnInit() {\r\n        \r\n        const header = new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n            Authorization: LedgerHelper.token\r\n               // ' Token eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJha2tra3hAZ21haWwuY29tIn0.yWOqDQLPMzoFq47rnNqb18P-hnUjOK98T8Ea5omtEK9l_6eBTE9YmpUqFIhbU6ZuXo2ZPHB_RD8mhgSAcLPUwg' \r\n        });\r\n\r\n\r\n        this.getDoctorList(header);\r\n    //   if(localStorage.getItem('profile_type') == 'Doctor'){\r\n    //     // this.getPatientList(header);\r\n    //   }else{\r\n    //   this.getDoctorList(header);\r\n    // }\r\n\r\n        this.getReportList(header);\r\n\r\n    }\r\n\r\n\r\n\r\n    getDoctorList(headers) {\r\n\r\n        this.getDoctor(headers)\r\n            .subscribe(data => {\r\n                console.log(data);\r\n\r\n                if (data.status == 200) {\r\n                    // this.message = data.body.resp.desc;\r\n                    // this.open();\r\n\r\n                    for (let i = 0; i < data.body.streams.length; i++) {\r\n\r\n                        let display: string;\r\n\r\n                        if (data.body.streams[i].dp == null || data.body.streams[i].dp.length < 10) {\r\n\r\n                            display = this.placeholder_img;\r\n                        } else {\r\n                            display = data.body.streams[i].dp;\r\n                        }\r\n\r\n\r\n                        const user: User = {\r\n\r\n                            first_name: data.body.streams[i].first_name,\r\n                            last_name: data.body.streams[i].last_name,\r\n                            profile_type: data.body.streams[i].profile_type,\r\n                            address: data.body.streams[i].address,\r\n                            date_of_birth: data.body.streams[i].date_of_birth,\r\n                            dp: display,\r\n                            email: data.body.streams[i].email,\r\n                            gender: data.body.streams[i].gender,\r\n                            phone_number: data.body.streams[i].phone_number,\r\n                            security: data.body.streams[i].security,\r\n                            reports: data.body.streams[i].reports,\r\n                            _id: data.body.streams[i]._id\r\n\r\n                        };\r\n\r\n                        this.users.push(user);\r\n\r\n                    }\r\n\r\n                    // this.persistenceService.set('doctorlist', JSON.stringify(this.users), { type: StorageType.SESSION });\r\n                    // this.persistenceService.set('doctorlist', JSON.stringify(this.users));\r\n                    this.ledgerHelper.userList = JSON.stringify(this.users);\r\n\r\n\r\n\r\n                } else {\r\n                    // this.message = ' Something went wrong! ';\r\n                    // this.open();\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    getAssignedPatientList(headers) {\r\n        this.getPatient(headers)\r\n            .subscribe(data => {\r\n                console.log(data);\r\n            });\r\n    }\r\n\r\n\r\n    getReportList(headers) {\r\n        this.getReport(headers).subscribe(data => {\r\n            console.log(data);\r\n\r\n            if (data.status == 200) {\r\n                // this.message = data.body.resp.desc;\r\n                // this.open();\r\n\r\n                if (data.body.streams.length < 0) {\r\n                    // this.message = 'No reports found in ledger';\r\n                    // this.open();\r\n                    return;\r\n                }\r\n\r\n                for (let i = 0; i < data.body.streams[0].reports.length; i++) {\r\n\r\n                    const report: Report = {\r\n\r\n                        id: '' + (i + 1),\r\n                        title: data.body.streams[0].reports[i].title,\r\n                        patientName: data.body.streams[0].reports[i].patientName,\r\n                        fileName: data.body.streams[0].reports[i].fileName,\r\n                        description: data.body.streams[0].reports[i].description,\r\n                        content: data.body.streams[0].reports[i].content,\r\n                        doctors: data.body.streams[0].reports[i].doctors,\r\n\r\n                    };\r\n\r\n                    this.reports.push(report);\r\n                }\r\n\r\n                this.ledgerHelper.reports = JSON.stringify(this.reports);\r\n\r\n                console.log('after save 1--' + JSON.stringify(this.reports));\r\n                console.log('after save --' + this.ledgerHelper.reports);\r\n\r\n            } else {\r\n                // this.message = ' Something went wrong! ';\r\n                // this.open();\r\n            }\r\n        });\r\n    }\r\n\r\n    getDoctor(header) {\r\n        return this.http.get<any>(this.getDoctorURL, { headers: header, observe: 'response' });\r\n    }\r\n\r\n    getPatient(header) {\r\n        return this.http.get<any>(this.getPatientURL, { headers: header, observe: 'response' });\r\n    }\r\n\r\n    getReport(header) {\r\n        return this.http.get<any>(this.getReportURL, { headers: header, observe: 'response' });\r\n    }\r\n\r\n    placeholder_img = '';\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule\r\n} from '@angular/material';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\r\nimport { TopnavComponent } from './components/topnav/topnav.component';\r\nimport { LayoutRoutingModule } from './layout-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { NavComponent } from './nav/nav.component';\r\nimport { PersistenceModule } from 'angular-persistence';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        LayoutRoutingModule,\r\n        MatToolbarModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatMenuModule,\r\n        MatListModule,\r\n        TranslateModule,\r\n        PersistenceModule\r\n    ],\r\n    declarations: [LayoutComponent, NavComponent, TopnavComponent, SidebarComponent]\r\n})\r\nexport class LayoutModule {}\r\n","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n    <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport=\\\"true\\\" [attr.role]=\\\"isHandset ? 'dialog' : 'navigation'\\\" [mode]=\\\"(isHandset | async)!.matches ? 'over' : 'side'\\\"\\r\\n        [opened]=\\\"!(isHandset | async)!.matches\\\">\\r\\n        <mat-toolbar color=\\\"primary\\\">DHealth</mat-toolbar>\\r\\n        <mat-nav-list>\\r\\n            <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/dashboard']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">dashboard</mat-icon> Dashbard\\r\\n            </a> -->\\r\\n            <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/charts']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">bar_chart</mat-icon> Charts\\r\\n            </a> -->\\r\\n            <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/forms']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">input</mat-icon> Forms\\r\\n            </a> -->\\r\\n            <!-- <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/grid']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">grid_on</mat-icon> Grid\\r\\n            </a> -->\\r\\n            <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/components']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">code</mat-icon> Components\\r\\n            </a>\\r\\n            <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/blank-page']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">insert_drive_file</mat-icon> Black Page\\r\\n            </a>\\r\\n            <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/doctorpatient-page']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">insert_drive_file</mat-icon> DoctorPatient Page\\r\\n            </a>\\r\\n            <a mat-list-item [routerLinkActive]=\\\"'active'\\\" [routerLink]=\\\"['/report-list']\\\">\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">table_chart</mat-icon> Tables\\r\\n            </a>\\r\\n            <a mat-list-item>\\r\\n                <mat-icon class=\\\"sidenav-icon\\\">add</mat-icon> Menu\\r\\n            </a>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n        <mat-toolbar color=\\\"primary\\\" class=\\\"fix-nav\\\">\\r\\n            <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\" *ngIf=\\\"(isHandset | async)!.matches\\\">\\r\\n                <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n            </button>\\r\\n            <mat-icon class=\\\"nav-icon\\\">menu</mat-icon>\\r\\n            <span class=\\\"nav-spacer\\\"></span>\\r\\n            <!--\\r\\n            <mat-icon class=\\\"nav-icon\\\">person</mat-icon>\\r\\n            <span class=\\\"nav-spacer\\\"></span>\\r\\n            <mat-icon class=\\\"nav-icon\\\">notifications</mat-icon>\\r\\n            <mat-icon class=\\\"nav-icon\\\">apps</mat-icon>\\r\\n            <mat-icon class=\\\"nav-icon\\\">fullscreen</mat-icon>\\r\\n            <mat-icon class=\\\"nav-icon\\\">flag</mat-icon>\\r\\n            <mat-icon class=\\\"nav-icon\\\">search</mat-icon>\\r\\n            <mat-icon class=\\\"nav-icon\\\">account_circle</mat-icon> -->\\r\\n            <a class=\\\"topnav-icon\\\" [routerLink]=\\\"['/login']\\\">\\r\\n                <mat-icon>exit_to_app</mat-icon>\\r\\n            </a>\\r\\n\\r\\n        </mat-toolbar>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\"","module.exports = \".sidenav-container {\\n  height: 100%; }\\n\\n.sidenav {\\n  width: 250px;\\n  box-shadow: 3px 0 6px rgba(0, 0, 0, 0.24); }\\n\\n.topnav-icon {\\n  text-decoration: none;\\n  display: flex;\\n  color: #fff; }\\n\\n.sidenav-icon {\\n  text-decoration: none;\\n  padding: 0 10px; }\\n\\n.nav-spacer {\\n  flex: 1 1 auto; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L25hdi9DOlxcVXNlcnNcXEhhbWlkXFxEZXNrdG9wXFxBTFNES1xcZXhhbXBsZXNcXHNiLWFkbWluLW1hdGVyaWFsL3NyY1xcYXBwXFxsYXlvdXRcXG5hdlxcbmF2LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFBWSxFQUFBOztBQUdoQjtFQUNJLFlBQVk7RUFDWix5Q0FBeUMsRUFBQTs7QUFFN0M7RUFDSSxxQkFBcUI7RUFDckIsYUFBYTtFQUNiLFdBQVcsRUFBQTs7QUFHZjtFQUNJLHFCQUFxQjtFQUNyQixlQUFlLEVBQUE7O0FBR25CO0VBQ0ksY0FBYyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbGF5b3V0L25hdi9uYXYuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2lkZW5hdi1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uc2lkZW5hdiB7XHJcbiAgICB3aWR0aDogMjUwcHg7XHJcbiAgICBib3gtc2hhZG93OiAzcHggMCA2cHggcmdiYSgwLCAwLCAwLCAwLjI0KTtcclxufVxyXG4udG9wbmF2LWljb24ge1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG4uc2lkZW5hdi1pY29uIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIHBhZGRpbmc6IDAgMTBweDtcclxufVxyXG5cclxuLm5hdi1zcGFjZXIge1xyXG4gICAgZmxleDogMSAxIGF1dG87XHJcbn1cclxuXHJcbi8vIC5maXgtbmF2IHtcclxuLy8gICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuLy8gICAgIHRvcDogMDtcclxuLy8gICAgIGxlZnQ6IDI1MHB4O1xyXG4vLyAgICAgcmlnaHQ6IDA7XHJcbi8vIH1cclxuIl19 */\"","import { Observable } from 'rxjs';\r\n\r\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-nav',\r\n    templateUrl: './nav.component.html',\r\n    styleUrls: ['./nav.component.scss']\r\n})\r\nexport class NavComponent {\r\n    isHandset: Observable<BreakpointState> = this.breakpointObserver.observe(\r\n        Breakpoints.Handset\r\n    );\r\n    constructor(private breakpointObserver: BreakpointObserver) {}\r\n}\r\n"],"sourceRoot":""}